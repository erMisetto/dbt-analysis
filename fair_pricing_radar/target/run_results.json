{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-06T22:04:26.333357Z", "invocation_id": "8aa680c1-e95a-4626-bae8-3c74c7f88ea2", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.866750Z", "completed_at": "2025-05-06T22:04:24.882707Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.884702Z", "completed_at": "2025-05-06T22:04:24.884702Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02393627166748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.fair_pricing_radar.outlier_distribution", "compiled": true, "compiled_code": "", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.874728Z", "completed_at": "2025-05-06T22:04:24.883704Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.885699Z", "completed_at": "2025-05-06T22:04:24.885699Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023935317993164062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_carrier_competition", "compiled": true, "compiled_code": "", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_carrier_competition", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.876723Z", "completed_at": "2025-05-06T22:04:24.883704Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.886696Z", "completed_at": "2025-05-06T22:04:24.886696Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023935556411743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_route_stats", "compiled": true, "compiled_code": "", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_route_stats", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.880712Z", "completed_at": "2025-05-06T22:04:24.884702Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.887694Z", "completed_at": "2025-05-06T22:04:24.887694Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023935794830322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.snap_carrier_marketshare", "compiled": true, "compiled_code": "", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.snap_carrier_marketshare", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.894676Z", "completed_at": "2025-05-06T22:04:24.896669Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.901656Z", "completed_at": "2025-05-06T22:04:24.901656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01196742057800293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.fair_pricing_radar.carrier_mapping", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.896669Z", "completed_at": "2025-05-06T22:04:24.898664Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.902654Z", "completed_at": "2025-05-06T22:04:24.902654Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010970592498779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.fair_pricing_radar.seed_airport_geo", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.899661Z", "completed_at": "2025-05-06T22:04:24.901656Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.903651Z", "completed_at": "2025-05-06T22:04:24.903651Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011967658996582031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.fair_pricing_radar.seed_fare_bucket_map", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.912627Z", "completed_at": "2025-05-06T22:04:24.940552Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.942547Z", "completed_at": "2025-05-06T22:04:24.942547Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03490495681762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.dim_carrier", "compiled": true, "compiled_code": "\n\nselect\n  code   as carrier_code,\n  name   as carrier_name\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.carrier_mapping", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.dim_carrier", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.916616Z", "completed_at": "2025-05-06T22:04:24.940552Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.943545Z", "completed_at": "2025-05-06T22:04:24.943545Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036899566650390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_carrier_mapping_code.426c4bbd7e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.carrier_mapping\nwhere code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.928584Z", "completed_at": "2025-05-06T22:04:24.941550Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.944542Z", "completed_at": "2025-05-06T22:04:24.944542Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0359041690826416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_carrier_mapping_name.b71e317111", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.carrier_mapping\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.932574Z", "completed_at": "2025-05-06T22:04:24.943545Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.946536Z", "completed_at": "2025-05-06T22:04:24.946536Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03690147399902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.unique_carrier_mapping_code.9d7401ff35", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code as unique_field,\n    count(*) as n_records\n\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.carrier_mapping\nwhere code is not null\ngroup by code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.953518Z", "completed_at": "2025-05-06T22:04:24.973464Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.975460Z", "completed_at": "2025-05-06T22:04:24.975460Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026928424835205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_seed_airport_geo_iata_code.6ab15a9c6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect iata_code\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo\nwhere iata_code is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.958505Z", "completed_at": "2025-05-06T22:04:24.974462Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.976456Z", "completed_at": "2025-05-06T22:04:24.976456Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026928186416625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_seed_airport_geo_lat_deg.4ca3a116d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lat_deg\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo\nwhere lat_deg is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.963491Z", "completed_at": "2025-05-06T22:04:24.974462Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.977454Z", "completed_at": "2025-05-06T22:04:24.977454Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026928186416625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_seed_airport_geo_lon_deg.642f414f12", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lon_deg\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo\nwhere lon_deg is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.968478Z", "completed_at": "2025-05-06T22:04:24.976456Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:24.979448Z", "completed_at": "2025-05-06T22:04:24.979448Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027925491333007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.unique_seed_airport_geo_iata_code.e2b2ae51c6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    iata_code as unique_field,\n    count(*) as n_records\n\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo\nwhere iata_code is not null\ngroup by iata_code\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.986430Z", "completed_at": "2025-05-06T22:04:25.016349Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.019342Z", "completed_at": "2025-05-06T22:04:25.019342Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03789949417114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.stg_fare_searches", "compiled": true, "compiled_code": "\n\n\n\n\n-- \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n-- 1 \u00b7 RAW rows (keep only sensible bookings)\n-- \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nwith raw as (\n\n    select\n        legid,\n\n        try_to_date(searchdate)                  as search_date,\n        try_to_date(flightdate)                  as flight_date,\n\n        cast(totalfare         as numeric)       as total_fare,\n        cast(basefare          as numeric)       as base_fare,\n        cast(seatsremaining    as numeric)       as seats_remaining,\n\n        isnonstop                                as is_nonstop,\n        isbasiceconomy                           as is_basic_econ,\n        isrefundable                             as is_refundable,\n        trim(farebasiscode)                      as farebasiscode,\n\n        cast(totaltraveldistance as numeric)     as raw_total_miles,\n\n        travelduration,\n        segmentsdepartureairportcode,\n        segmentsarrivalairportcode,\n        segmentsairlinecode,\n        segmentsdistance,\n        segmentsdurationinseconds,\n        segmentsequipmentdescription,\n        segmentscabincode\n\n    from FLIGHT_PRICES.WALRUS_PUBLIC.FLIGHT_PRICING_DATA\n    where   searchdate    is not null\n        and flightdate    is not null\n        and flightdate   >= searchdate\n        and totalfare     is not null\n\n),\n\n-- \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n-- 2 \u00b7 BASIC DERIVATIONS\n-- \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nprep as (\n\n    select\n        r.*,\n\n        split(trim(r.segmentsdepartureairportcode), '||') as dep_arr,\n        split(trim(r.segmentsarrivalairportcode),   '||') as arr_arr,\n\n        /* origin / destination (first & last element) */\n        trim(replace(dep_arr[0],                       '\"',''))              as origin,\n        trim(replace(arr_arr[array_size(arr_arr)-1],   '\"',''))              as destination,\n\n        /* CLEAN marketing carrier (1st code, no stray quotes) */\n        replace(split(trim(r.segmentsairlinecode), '||')[0], '\"','')         as marketing_carrier,\n\n        /* use the aliased columns, not raw SEARCHDATE */\n        datediff('day', r.search_date, r.flight_date)                         as days_to_flight\n\n    from raw r\n\n),\n\n-- \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n-- 3 \u00b7 ADD AIRPORT GEO (for GC fallback)\n-- \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nadd_geo as (\n\n    select\n        p.*,\n        og.lat_deg   as orig_lat,\n        og.lon_deg   as orig_lon,\n        dg.lat_deg   as dest_lat,\n        dg.lon_deg   as dest_lon\n\n    from prep p\n    left join FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo og on p.origin      = og.iata_code\n    left join FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo dg on p.destination = dg.iata_code\n),\n\n-- \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n-- 4 \u00b7 DISTANCE: choose \u201creasonable\u201d miles\n--      \u2022 raw_total_miles  (path) kept **iff**\n--        it is \u2264 2 \u00d7 GC; otherwise fall back to GC\n--      \u2022 GC always padded by 2 % to approximate routing\n-- \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nwith_gc as (\n\n    select\n        g.*,\n\n        /* great-circle miles (+2 % pad) */\n        case\n          when g.orig_lat is not null and g.dest_lat is not null then\n               1.02 * st_distance(\n                       to_geography('POINT(' || g.orig_lon || ' ' || g.orig_lat || ')'),\n                       to_geography('POINT(' || g.dest_lon || ' ' || g.dest_lat || ')')\n                     ) / 1609.344\n        end                                                    as gc_miles\n\n    from add_geo g\n),\n\nchoose_dist as (\n\n    select\n        c.*,\n\n        coalesce(\n            -- 1\ufe0f\u20e3 keep path distance if \u201creasonable\u201d\n            case\n              when c.raw_total_miles is not null\n               and c.gc_miles        is not null\n               and c.raw_total_miles <= 2 * c.gc_miles\n              then c.raw_total_miles\n            end,\n            -- 2\ufe0f\u20e3 else GC-miles\n            c.gc_miles,\n            -- 3\ufe0f\u20e3 else raw (last resort)\n            c.raw_total_miles\n        )                                                       as total_miles\n\n    from with_gc c\n),\n\n-- \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n-- 5 \u00b7 BUSINESS FIELDS\n-- \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nready as (\n\n    select\n        d.*,\n\n        d.total_fare / nullif(d.total_miles,0)                  as usd_per_mi,\n\n        case\n            when seats_remaining = 0          then 'sold_out'\n            when seats_remaining between 1 and 8 then 'scarce'\n            else                                   '9plus'\n        end                                                    as seats_flag,\n\n        fb.fare_bucket\n    from choose_dist d\n    left join FLIGHT_PRICES.WALRUS_PUBLIC.seed_fare_bucket_map fb\n      on upper(left(d.farebasiscode,1)) = fb.first_letter\n)\n\n-- \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n-- 6 \u00b7 FINAL STAGING SELECT\n-- \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\nselect\n    legid,\n    search_date,\n    flight_date,\n    days_to_flight,\n\n    origin,\n    destination,\n    origin || '-' || destination                          as route,\n\n    marketing_carrier,\n\n    total_fare,\n    base_fare,\n    total_miles,\n    usd_per_mi,\n\n    is_nonstop,\n    is_basic_econ,\n    is_refundable,\n\n    farebasiscode,\n    fare_bucket,\n\n    seats_remaining,\n    seats_flag,\n\n    travelduration,\n    segmentsdepartureairportcode,\n    segmentsarrivalairportcode,\n    segmentsairlinecode,\n    segmentsdistance,\n    segmentsdurationinseconds,\n    segmentsequipmentdescription,\n    segmentscabincode\n\nfrom ready", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:24.994409Z", "completed_at": "2025-05-06T22:04:25.017347Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.020339Z", "completed_at": "2025-05-06T22:04:25.020339Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03789877891540527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.accepted_values_seed_fare_bucket_map_fare_bucket__prem_cabin__full_mid_econ__deep_disc_econ.2189445c29", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        fare_bucket as value_field,\n        count(*) as n_records\n\n    from FLIGHT_PRICES.WALRUS_PUBLIC.seed_fare_bucket_map\n    group by fare_bucket\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'prem_cabin','full_mid_econ','deep_disc_econ'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.006377Z", "completed_at": "2025-05-06T22:04:25.018345Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.021336Z", "completed_at": "2025-05-06T22:04:25.021336Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03789877891540527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_seed_fare_bucket_map_fare_bucket.b62e02d88a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fare_bucket\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.seed_fare_bucket_map\nwhere fare_bucket is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.011364Z", "completed_at": "2025-05-06T22:04:25.018345Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.022334Z", "completed_at": "2025-05-06T22:04:25.022334Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03789854049682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_seed_fare_bucket_map_first_letter.af720a7b60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect first_letter\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.seed_fare_bucket_map\nwhere first_letter is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.030313Z", "completed_at": "2025-05-06T22:04:25.048264Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.050259Z", "completed_at": "2025-05-06T22:04:25.050259Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02493429183959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.unique_seed_fare_bucket_map_first_letter.bd7bc9e889", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    first_letter as unique_field,\n    count(*) as n_records\n\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.seed_fare_bucket_map\nwhere first_letter is not null\ngroup by first_letter\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.035299Z", "completed_at": "2025-05-06T22:04:25.049262Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.052255Z", "completed_at": "2025-05-06T22:04:25.052255Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025931596755981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_fare_legs", "compiled": true, "compiled_code": "\n\nwith bookings as (\n\n    /* Pull the raw pipe-delimited strings from staging */\n    select\n        legid,\n\n        -- turn each pipe-delimited string into an ARRAY\n        split(trim(segmentsdepartureairportcode), '||')  as dep_airport_arr,\n        split(trim(segmentsarrivalairportcode),   '||')  as arr_airport_arr,\n        split(trim(segmentsairlinecode),          '||')  as seg_airline_arr,\n        split(trim(segmentsdistance),             '||')  as seg_dist_arr,\n        split(trim(segmentsdurationinseconds),    '||')  as seg_dur_arr\n\n    from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n\n), flattened as (\n\n    /*\n     * FLATTEN explodes the arrays.  `f.index` is the 0-based position.\n     * For each position, pull the matching element from every array.\n     */\n    select\n        b.legid,\n        f.index + 1                                                   as leg_number,\n\n        trim(replace(b.dep_airport_arr[f.index], '\\\"',''))            as departure_airport,\n        trim(replace(b.arr_airport_arr[f.index], '\\\"',''))            as arrival_airport,\n        trim(replace(b.seg_airline_arr[f.index],  '\\\"',''))           as operating_carrier,\n\n        try_to_number(\n            trim(replace(b.seg_dist_arr[f.index], '\\\"',''))\n        )                                                             as leg_distance,\n\n        try_to_number(\n            trim(replace(b.seg_dur_arr[f.index],  '\\\"',''))\n        )                                                             as leg_duration_sec\n\n    from bookings b,\n         lateral flatten(input => b.dep_airport_arr) f                -- drive the explode\n\n)\n\nselect\n    legid,\n    leg_number,\n    departure_airport,\n    arrival_airport,\n    operating_carrier,\n    leg_distance,\n    leg_duration_sec\nfrom flattened", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_fare_legs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.038291Z", "completed_at": "2025-05-06T22:04:25.049262Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.053251Z", "completed_at": "2025-05-06T22:04:25.053251Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026927709579467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_route_competition", "compiled": true, "compiled_code": "\n\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-- 1 \u00b7  Base rows: one record per booking\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nwith base as (\n\n    select\n        /* canonical route key */\n        origin || '-' || destination            as route,\n\n        /* airline operating (first marketing carrier) */\n        marketing_carrier,                      -- \u2190 must exist in stg_fare_searches\n\n        /* optional: keep flight_date so we can aggregate by period later */\n        flight_date\n\n    from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n\n    /* safeguard: ignore records with no carrier code */\n    where marketing_carrier is not null\n\n),\n\n\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-- 2 \u00b7  Count bookings per carrier on each route\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ncarrier_flights as (\n\n    select\n        route,\n        marketing_carrier,\n        count(*)                                as flight_bookings\n    from base\n    group by\n        route,\n        marketing_carrier\n\n),\n\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-- 3 \u00b7  Competition metrics (HHI + carrier_count)\n--     HHI = \u03a3(s\u1d62\u00b2) where s\u1d62 = share of bookings for carrier i on the route\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nconcentration as (\n\n    select\n        route,\n\n        /* denominator for shares */\n        sum(flight_bookings)                         as total_bookings,\n\n        /* Herfindahl-Hirschman Index */\n        sum( power(flight_bookings, 2) )\n            / power(sum(flight_bookings), 2)         as hhi,\n\n        /* # distinct carriers */\n        count(marketing_carrier)                     as carrier_count\n    from carrier_flights\n    group by route\n\n)\n\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n-- 4 \u00b7  Final output\n-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nselect\n    route,\n    carrier_count,      -- e.g. 1  = monopoly, 2+ = competing carriers\n    hhi                 -- 1.0 = pure monopoly; < 0.20 = highly competitive\nfrom concentration", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_route_competition", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.042280Z", "completed_at": "2025-05-06T22:04:25.051258Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.054248Z", "completed_at": "2025-05-06T22:04:25.054248Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.026927709579467773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_route_daily_prices", "compiled": true, "compiled_code": "\n\nwith base as (\n\n  select\n    origin,\n    destination,\n    -- Define a route key so JFK-LAX and LAX-JFK stay distinct\n    origin || '-' || destination        as route,\n\n    /* bucket days_to_flight */\n    case\n      when days_to_flight between  0 and  3 then '00-03'\n      when days_to_flight between  4 and  7 then '04-07'\n      when days_to_flight between  8 and 29 then '08-29'\n      else                                  '30+'\n    end                                  as dtf_bucket,\n\n    flight_date,\n    search_date,\n\n    -- cleaned two-letter carrier code (first element of the pipe-delimited string)\n    trim(\n      replace(\n        split(segmentsairlinecode, '||')[0],\n        '\"',''\n      )\n    )                                    as carrier_code,\n\n    total_fare,\n    base_fare,\n    total_fare / nullif(base_fare, 0)     as total_base_ratio\n\n  from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n\n),\n\nagg as (\n\n  select\n    route,\n    carrier_code              as marketing_carrier,\n    dtf_bucket,\n    flight_date,               -- keep flight_date for like-for-like comparisons\n    count(*)                   as obs,\n    median(total_fare)         as median_fare,\n    percentile_cont(0.95)\n      within group (order by total_fare)  as p95_fare,\n    median(total_base_ratio)   as median_ratio,\n    percentile_cont(0.95)\n      within group (order by total_base_ratio) as p95_ratio\n\n  from base\n  group by\n    route,\n    carrier_code,\n    dtf_bucket,\n    flight_date\n\n),\n\nwith_named as (\n\n  select\n    a.*,\n    m.name as marketing_carrier_name\n  from agg as a\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.carrier_mapping as m\n    on a.marketing_carrier = m.code\n\n)\n\nselect\n  route,\n  marketing_carrier        as carrier_code,\n  marketing_carrier_name   as carrier_name,\n  dtf_bucket,\n  flight_date,\n  obs,\n  median_fare,\n  p95_fare,\n  median_ratio,\n  p95_ratio\nfrom with_named", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_route_daily_prices", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.061230Z", "completed_at": "2025-05-06T22:04:25.085166Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.087160Z", "completed_at": "2025-05-06T22:04:25.087160Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03191494941711426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.stg_route_stats", "compiled": true, "compiled_code": "\n\nwith base as (\n\n  select\n    route,\n    fare_bucket,\n    usd_per_mi\n  from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n  where usd_per_mi is not null\n\n),\n\nbench as (\n\n  select\n    route,\n    fare_bucket,\n\n    -- Percentile benchmarks (unqualified usd_per_mi)\n    percentile_cont(0.50) within group (order by usd_per_mi) as p50_usd_per_mi,\n    percentile_cont(0.90) within group (order by usd_per_mi) as p90_usd_per_mi,\n    percentile_cont(0.95) within group (order by usd_per_mi) as p95_usd_per_mi,\n    percentile_cont(0.97) within group (order by usd_per_mi) as p97_usd_per_mi,\n\n    max(usd_per_mi)   as max_usd_per_mi,\n    count(*)          as legs_sampled\n\n  from base\n  group by\n    route,\n    fare_bucket\n\n)\n\nselect * from bench", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.stg_route_stats", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.066217Z", "completed_at": "2025-05-06T22:04:25.086163Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.089155Z", "completed_at": "2025-05-06T22:04:25.089155Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030917644500732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.accepted_values_stg_fare_searches_seats_flag__sold_out__scarce__9plus.024ce89e0d", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        seats_flag as value_field,\n        count(*) as n_records\n\n    from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n    group by seats_flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'sold_out','scarce','9plus'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.072200Z", "completed_at": "2025-05-06T22:04:25.087160Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.090152Z", "completed_at": "2025-05-06T22:04:25.090152Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031914472579956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.dbt_utils_equal_rowcount_stg_fare_searches_ref_stg_fare_searches_.acc6ff2432", "compiled": true, "compiled_code": "\n\nwith a as (\n\n    select count(*) as count_a from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n\n),\nb as (\n\n    select count(*) as count_b from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.081177Z", "completed_at": "2025-05-06T22:04:25.088158Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.091149Z", "completed_at": "2025-05-06T22:04:25.091149Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.032912492752075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_stg_fare_searches_legid.4bd74c9bed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect legid\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\nwhere legid is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.100126Z", "completed_at": "2025-05-06T22:04:25.118078Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.121070Z", "completed_at": "2025-05-06T22:04:25.121070Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025931119918823242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_stg_fare_searches_total_miles.d55d372e6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_miles\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\nwhere total_miles is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.105113Z", "completed_at": "2025-05-06T22:04:25.119075Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.122068Z", "completed_at": "2025-05-06T22:04:25.122068Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025931358337402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_stg_fare_searches_usd_per_mi.c81ef7888a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect usd_per_mi\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\nwhere usd_per_mi is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.109101Z", "completed_at": "2025-05-06T22:04:25.120073Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.123064Z", "completed_at": "2025-05-06T22:04:25.123064Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025930404663085938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.unique_stg_fare_searches_legid.53eca1764f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    legid as unique_field,\n    count(*) as n_records\n\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\nwhere legid is not null\ngroup by legid\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.114088Z", "completed_at": "2025-05-06T22:04:25.121070Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.124062Z", "completed_at": "2025-05-06T22:04:25.124062Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.026928424835205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_route_fare_per_mi_stats", "compiled": true, "compiled_code": "\n\n-- \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n-- 1.  Booking-level facts\n-- \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nwith base as (\n\n    select\n        legid,\n        search_date,\n        flight_date,\n        days_to_flight,\n        route,\n        origin,\n        destination,\n        fare_bucket,\n        total_miles,\n        usd_per_mi,\n        total_fare,\n        base_fare,\n        seats_flag,\n        is_nonstop,\n        is_basic_econ,\n        is_refundable\n    from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches\n    where usd_per_mi is not null\n\n),\n\n-- \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n-- 2.  Route-bucket benchmarks\n-- \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nbench as (\n\n    select *\n    from FLIGHT_PRICES.WALRUS_PUBLIC.stg_route_stats\n\n),\n\n-- \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n-- 3.  Join + z-scores & premium flags\n-- \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\njoined as (\n\n    select\n        b.*,\n\n        -- bring in benchmarks\n        br.p50_usd_per_mi,\n        br.p90_usd_per_mi,\n        br.p95_usd_per_mi,\n        br.p97_usd_per_mi,\n        br.max_usd_per_mi,\n        coalesce(br.legs_sampled, 0)          as legs_sampled,\n\n        -- \u03c3 \u2248 (p95 \u2013 p50) / 1.645\n        (b.usd_per_mi - br.p50_usd_per_mi)\n          / nullif((br.p95_usd_per_mi - br.p50_usd_per_mi) / 1.645, 0)\n                                              as usd_per_mi_z,\n\n        case when b.usd_per_mi >= br.p95_usd_per_mi then 1 else 0 end\n                                              as is_above_p95,\n        case when b.usd_per_mi >= br.p97_usd_per_mi then 1 else 0 end\n                                              as is_above_p97\n\n    from base  b\n    left join bench br\n      on  b.route       = br.route\n      and b.fare_bucket = br.fare_bucket\n\n)\n\nselect * from joined", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_route_fare_per_mi_stats", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.131043Z", "completed_at": "2025-05-06T22:04:25.154979Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.157972Z", "completed_at": "2025-05-06T22:04:25.157972Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030918598175048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_rules_r1_r2_r3", "compiled": true, "compiled_code": "\n\n\n\n\n\n-- 1. Core booking row + route & carrier stats\nwith base as (\n\n  select\n    s.legid,\n    s.route,\n    s.flight_date,\n    s.search_date,\n    s.days_to_flight,\n    s.fare_bucket,\n    s.usd_per_mi,\n    s.seats_flag,\n\n    rs.p50_usd_per_mi,\n    rs.p90_usd_per_mi,\n    rs.p95_usd_per_mi,\n    rs.p97_usd_per_mi,\n\n    c.carrier_count,\n    c.hhi\n\n  from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches           as s\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.stg_route_stats       as rs using (route, fare_bucket)\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.int_route_competition as c  using (route)\n\n),\n\n-- 2. Apply Rules 1\u20133 with dynamic Rule 2 threshold\nrules as (\n\n  select\n    *,\n    \n    /* Rule 1: z-score \u2265 1.5 */\n    case\n      when ((usd_per_mi - p50_usd_per_mi)\n             / nullif((p95_usd_per_mi - p50_usd_per_mi) / 1.645, 0)\n           ) >= 1.5\n      then 1 else 0\n    end as r1_price_outlier_flag,\n\n    /* Rule 2: seat scarcity + price \u2265 dynamic 90.0th percentile */\n    case\n      when seats_flag in ('sold_out','scarce')\n       and usd_per_mi >= percentile_cont(0.9)\n                            within group (order by usd_per_mi)\n                            over (partition by route, fare_bucket)\n      then 1 else 0\n    end as r2_seat_scarcity_flag,\n\n    /* Rule 3: monopoly premium (HHI \u2265 0.8) */\n    case\n      when hhi >= 0.8\n       and usd_per_mi >= p95_usd_per_mi\n      then 1 else 0\n    end as r3_monopoly_premium_flag\n\n  from base\n\n)\n\n-- 3. Final select with \u201cany rule\u201d flag\nselect\n  *,\n  case\n    when r1_price_outlier_flag    = 1\n      or r2_seat_scarcity_flag    = 1\n      or r3_monopoly_premium_flag = 1\n    then 1 else 0\n  end as any_rule_flag\n\nfrom rules", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_rules_r1_r2_r3", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.138025Z", "completed_at": "2025-05-06T22:04:25.155976Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.158969Z", "completed_at": "2025-05-06T22:04:25.158969Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03091740608215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_pricing_features", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n-- 1 \u00b7 BOOKINGS (clean staging)\nwith bookings as (\n  select\n    s.legid,\n    s.origin,\n    s.destination,\n    s.origin || '-' || s.destination            as route,\n    s.search_date,\n    s.flight_date,\n    s.days_to_flight,\n    case\n      when s.days_to_flight between  0 and  3 then '00-03'\n      when s.days_to_flight between  4 and  7 then '04-07'\n      when s.days_to_flight between  8 and 29 then '08-29'\n      else                                      '30+'\n    end                                          as dtf_bucket,\n    s.total_fare,\n    s.base_fare,\n    s.total_fare / nullif(s.base_fare, 0)       as total_base_ratio,\n    array_size(split(s.segmentsdepartureairportcode, '||'))\n                                                as segment_count,\n    split(s.segmentsairlinecode, '||')[0]        as carrier_code,\n    s.seats_flag,\n    s.fare_bucket,\n    s.total_miles                               as staging_trip_dist,\n    s.usd_per_mi                                as staging_usd_per_mi\n  from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches as s\n),\n\n-- 2 \u00b7 LAST-RESORT DISTANCE (great-circle + 2%)\ngc_dist as (\n  select\n    b.*,\n    coalesce(\n      b.staging_trip_dist,\n      1.02 * (\n        st_distance(\n          to_geography('POINT(' || og.lon_deg || ' ' || og.lat_deg || ')'),\n          to_geography('POINT(' || dg.lon_deg || ' ' || dg.lat_deg || ')')\n        ) / 1609.344\n      )\n    )                                          as trip_dist\n  from bookings b\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo as og\n    on og.iata_code = b.origin\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo as dg\n    on dg.iata_code = b.destination\n),\n\n-- 3 \u00b7 RECALCULATE USD_PER_MI\npriced as (\n  select\n    g.*,\n    g.total_fare / nullif(g.trip_dist, 0)      as usd_per_mi\n  from gc_dist g\n),\n\n-- 4 \u00b7 BENCHMARKS (pull p50,p90,p95,p97 from stg_route_stats)\nbenchmarks as (\n  select\n    p.*,\n    rs.p50_usd_per_mi,\n    rs.p90_usd_per_mi,\n    rs.p95_usd_per_mi,\n    rs.p97_usd_per_mi\n  from priced p\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.stg_route_stats as rs\n    on rs.route       = p.route\n   and rs.fare_bucket = p.fare_bucket\n),\n\n-- 5 \u00b7 COMPETITION METRICS (clamp HHI to [0,1])\ncomp as (\n  select\n    b.*,\n    c.carrier_count,\n    least(1, greatest(0, c.hhi))              as hhi\n  from benchmarks b\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.int_route_competition as c\n    on c.route = b.route\n),\n\n-- 6 \u00b7 RULE FLAGS (using your tuned thresholds)\nflags as (\n  select\n    *,\n    /* R1: statistical outlier (z \u2265 1.5) */\n    case\n      when p50_usd_per_mi is not null\n       and p95_usd_per_mi is not null\n       and (usd_per_mi - p50_usd_per_mi)\n           / nullif((p95_usd_per_mi - p50_usd_per_mi)/1.645,0)\n           >= 1.5\n      then 1 else 0\n    end as r1_price_outlier,\n\n    /* R2: seat scarcity + top-90% price */\n    case\n      when seats_flag in ('sold_out','scarce')\n       and p90_usd_per_mi is not null\n       and usd_per_mi >= p90_usd_per_mi\n      then 1 else 0\n    end as r2_seat_scarcity,\n\n    /* R3: monopoly premium (HHI \u2265 0.8) */\n    case\n      when hhi >= 0.8\n       and p95_usd_per_mi is not null\n       and usd_per_mi >= p95_usd_per_mi\n      then 1 else 0\n    end as r3_monopoly_premium\n\n  from comp\n),\n\n-- 7 \u00b7 FINAL SELECT (any-rule flag)\nfinal as (\n  select\n    f.*,\n    case\n      when f.r1_price_outlier    = 1\n        or f.r2_seat_scarcity    = 1\n        or f.r3_monopoly_premium = 1\n      then 1 else 0\n    end                                             as any_rule_flag\n  from flags f\n)\n\nselect * from final", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.146003Z", "completed_at": "2025-05-06T22:04:25.156974Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.159965Z", "completed_at": "2025-05-06T22:04:25.159965Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03191423416137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_stg_route_stats_fare_bucket.a67ef6bea8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fare_bucket\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.stg_route_stats\nwhere fare_bucket is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.150989Z", "completed_at": "2025-05-06T22:04:25.158969Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.160963Z", "completed_at": "2025-05-06T22:04:25.160963Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03191518783569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.fair_pricing_radar.not_null_stg_route_stats_route.7d843619a5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect route\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.stg_route_stats\nwhere route is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.168942Z", "completed_at": "2025-05-06T22:04:25.187891Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.190883Z", "completed_at": "2025-05-06T22:04:25.190883Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025931358337402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.int_flagged_extra_costs", "compiled": true, "compiled_code": "\n\n-- 1. Grab only the bookings we\u2019ve flagged as suspicious\nwith flagged as (\n\n  select\n    legid,\n    route,\n    carrier_code            as marketing_carrier,\n    dtf_bucket,\n    flight_date,\n    total_fare,\n    r1_price_outlier        as is_r1,\n    r2_seat_scarcity        as is_r2,\n    r3_monopoly_premium     as is_r3\n\n  from FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features\n  where any_rule_flag = 1\n\n),\n\n-- 2. Pull in the median benchmark (use carrier_code \u2192 marketing_carrier)\nbench as (\n\n  select\n    route,\n    carrier_code            as marketing_carrier,\n    dtf_bucket,\n    flight_date,\n    median_fare\n\n  from FLIGHT_PRICES.WALRUS_PUBLIC.int_route_daily_prices\n\n),\n\n-- 3. Compute overage per booking\nextra as (\n\n  select\n    f.*,\n    b.median_fare,\n    case\n      when f.total_fare > b.median_fare then\n        f.total_fare - b.median_fare\n      else 0\n    end as extra_cost\n\n  from flagged f\n  left join bench b\n    using (route, marketing_carrier, dtf_bucket, flight_date)\n\n)\n\nselect * from extra", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.int_flagged_extra_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.173929Z", "completed_at": "2025-05-06T22:04:25.187891Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.191880Z", "completed_at": "2025-05-06T22:04:25.191880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026928424835205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_booking_window_analysis", "compiled": true, "compiled_code": "\n\nselect\n    dtf_bucket,\n    fare_bucket,\n    \n    -- Count metrics\n    count(*) as total_bookings,\n    sum(any_rule_flag) as flagged_bookings,\n    100.0 * sum(any_rule_flag) / nullif(count(*), 0) as pct_flagged,\n    \n    -- Rule breakdown\n    sum(r1_price_outlier) as r1_flags,\n    sum(r2_seat_scarcity) as r2_flags,\n    sum(r3_monopoly_premium) as r3_flags,\n    \n    -- Fare metrics by bucket\n    avg(total_fare) as avg_fare,\n    median(total_fare) as median_fare,\n    stddev(total_fare) as stddev_fare,\n    min(total_fare) as min_fare,\n    max(total_fare) as max_fare,\n    \n    -- Flagged fares metrics\n    avg(case when any_rule_flag = 1 then total_fare else null end) as avg_flagged_fare,\n    median(case when any_rule_flag = 1 then total_fare else null end) as median_flagged_fare,\n    \n    -- Premium calculation (average difference between flagged and normal)\n    avg(case when any_rule_flag = 1 then total_fare else null end) - \n    avg(case when any_rule_flag = 0 then total_fare else null end) as avg_premium,\n    \n    -- Booking patterns\n    count(distinct carrier_code) as unique_carriers,\n    count(distinct route) as unique_routes\n\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features\ngroup by dtf_bucket, fare_bucket\norder by \n    case \n        when dtf_bucket = '00-03' then 1\n        when dtf_bucket = '04-07' then 2\n        when dtf_bucket = '08-29' then 3\n        when dtf_bucket = '30+' then 4\n    end,\n    fare_bucket", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_booking_window_analysis", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.182904Z", "completed_at": "2025-05-06T22:04:25.188889Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.192877Z", "completed_at": "2025-05-06T22:04:25.192877Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025930404663085938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_pricing_alerts", "compiled": true, "compiled_code": "\n\nwith alerts as (\n\n  select\n    m.legid,\n    m.route,\n    m.flight_date,\n    m.carrier_code,\n    d.carrier_name,                     -- now pulled from dim_carrier\n    m.total_fare,\n    m.trip_dist,\n\n    m.r1_price_outlier    as flag_price_outlier,\n    m.r2_seat_scarcity    as flag_seat_scarcity,\n    m.r3_monopoly_premium as flag_monopoly,\n\n    array_construct_compact(\n      case when m.r1_price_outlier    = 1 then 'price_outlier'    end,\n      case when m.r2_seat_scarcity    = 1 then 'seat_scarcity'    end,\n      case when m.r3_monopoly_premium = 1 then 'monopoly_premium' end\n    ) as flag_list\n\n  from FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features as m\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.dim_carrier as d\n    on m.carrier_code = d.carrier_code\n\n  where m.r1_price_outlier    = 1\n     or m.r2_seat_scarcity    = 1\n     or m.r3_monopoly_premium = 1\n\n)\n\nselect * from alerts", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_alerts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.176920Z", "completed_at": "2025-05-06T22:04:25.189886Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.193875Z", "completed_at": "2025-05-06T22:04:25.193875Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02792525291442871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_carrier_performance", "compiled": true, "compiled_code": "\n\nwith flagged_with_median as (\n    -- Join pricing features with route daily prices to get median fare\n    select\n        f.carrier_code,\n        f.any_rule_flag,\n        f.total_fare,\n        f.r1_price_outlier,\n        f.r2_seat_scarcity,\n        f.r3_monopoly_premium,\n        f.route,\n        rdp.median_fare\n    from FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features f\n    left join FLIGHT_PRICES.WALRUS_PUBLIC.int_route_daily_prices rdp\n        on  rdp.route = f.route\n        and rdp.carrier_code = f.carrier_code\n        and rdp.dtf_bucket = f.dtf_bucket\n        and rdp.flight_date = f.flight_date\n),\n\nroute_competition_check as (\n    -- Get route competition data\n    select\n        f.route,\n        f.carrier_code,\n        rc.hhi\n    from FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features f\n    left join FLIGHT_PRICES.WALRUS_PUBLIC.int_route_competition rc\n        on rc.route = f.route\n    group by f.route, f.carrier_code, rc.hhi\n)\n\nselect\n    c.carrier_code,\n    c.carrier_name,\n    \n    -- Booking volumes\n    count(*) as total_bookings,\n    sum(f.any_rule_flag) as flagged_bookings,\n    100.0 * sum(f.any_rule_flag) / nullif(count(*), 0) as pct_flagged,\n    \n    -- Flag type breakdown\n    sum(f.r1_price_outlier) as r1_price_outlier_count,\n    sum(f.r2_seat_scarcity) as r2_seat_scarcity_count,\n    sum(f.r3_monopoly_premium) as r3_monopoly_premium_count,\n    \n    -- Percentage breakdown\n    100.0 * sum(f.r1_price_outlier) / nullif(count(*), 0) as pct_r1_outliers,\n    100.0 * sum(f.r2_seat_scarcity) / nullif(count(*), 0) as pct_r2_scarcity,\n    100.0 * sum(f.r3_monopoly_premium) / nullif(count(*), 0) as pct_r3_monopoly,\n    \n    -- Fare metrics\n    avg(f.total_fare) as avg_fare,\n    median(f.total_fare) as median_fare,\n    avg(case when f.any_rule_flag = 1 then f.total_fare else null end) as avg_flagged_fare,\n    \n    -- Extra cost total - now using pre-joined median fare\n    sum(case \n        when f.any_rule_flag = 1 and fm.median_fare is not null then \n            f.total_fare - fm.median_fare\n        else 0 \n    end) as total_extra_cost,\n    \n    -- Number of routes served\n    count(distinct f.route) as routes_served,\n    \n    -- Monopoly routes count\n    sum(case\n        when rc.hhi >= 0.8 then 1\n        else 0\n    end) as monopoly_routes_count\n\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features f\njoin FLIGHT_PRICES.WALRUS_PUBLIC.dim_carrier c\n    on f.carrier_code = c.carrier_code\nleft join flagged_with_median fm\n    on f.carrier_code = fm.carrier_code and f.route = fm.route\nleft join route_competition_check rc\n    on f.carrier_code = rc.carrier_code and f.route = rc.route\ngroup by c.carrier_code, c.carrier_name", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_carrier_performance", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.201853Z", "completed_at": "2025-05-06T22:04:25.220803Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.222798Z", "completed_at": "2025-05-06T22:04:25.222798Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025930404663085938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_route_map_data", "compiled": true, "compiled_code": "\n\nWITH route_metrics AS (\n    SELECT \n        f.ROUTE,\n        SPLIT_PART(f.ROUTE, '-', 1) AS ORIGIN,\n        SPLIT_PART(f.ROUTE, '-', 2) AS DESTINATION,\n        COUNT(*) AS TOTAL_BOOKINGS,\n        SUM(CASE WHEN f.R1_PRICE_OUTLIER = 1 OR f.R2_SEAT_SCARCITY = 1 OR f.R3_MONOPOLY_PREMIUM = 1 \n            THEN 1 ELSE 0 END) AS FLAGGED_BOOKINGS,\n        ROUND(100 * SUM(CASE WHEN f.R1_PRICE_OUTLIER = 1 OR f.R2_SEAT_SCARCITY = 1 OR f.R3_MONOPOLY_PREMIUM = 1 \n            THEN 1 ELSE 0 END) / COUNT(*), 1) AS PCT_FLAGGED\n    FROM FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features f\n    GROUP BY f.ROUTE\n),\nroute_comp AS (\n    SELECT \n        r.ROUTE,\n        r.HHI,\n        CASE \n            WHEN r.HHI >= 0.8 THEN 'High Concentration'\n            WHEN r.HHI >= 0.5 THEN 'Moderate Concentration'\n            ELSE 'Low Concentration'\n        END AS CONCENTRATION_LEVEL\n    FROM FLIGHT_PRICES.WALRUS_PUBLIC.int_route_competition r\n),\nairport_geo AS (\n    SELECT \n        IATA_CODE,\n        LAT_DEG AS AIRPORT_LAT,\n        LON_DEG AS AIRPORT_LON\n    FROM FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo\n)\nSELECT \n    m.ROUTE,\n    m.ORIGIN,\n    m.DESTINATION,\n    m.TOTAL_BOOKINGS,\n    m.FLAGGED_BOOKINGS,\n    m.PCT_FLAGGED,\n    c.HHI,\n    c.CONCENTRATION_LEVEL,\n    o.AIRPORT_LAT AS ORIGIN_LAT,\n    o.AIRPORT_LON AS ORIGIN_LON,\n    d.AIRPORT_LAT AS DESTINATION_LAT,\n    d.AIRPORT_LON AS DESTINATION_LON\nFROM route_metrics m\nLEFT JOIN route_comp c ON m.ROUTE = c.ROUTE\nLEFT JOIN airport_geo o ON m.ORIGIN = o.IATA_CODE\nLEFT JOIN airport_geo d ON m.DESTINATION = d.IATA_CODE\nWHERE o.AIRPORT_LAT IS NOT NULL \n  AND o.AIRPORT_LON IS NOT NULL\n  AND d.AIRPORT_LAT IS NOT NULL \n  AND d.AIRPORT_LON IS NOT NULL", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_route_map_data", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.205842Z", "completed_at": "2025-05-06T22:04:25.221800Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.224793Z", "completed_at": "2025-05-06T22:04:25.224793Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026928424835205078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_route_performance", "compiled": true, "compiled_code": "\n\nwith route_parts as (\n    select\n        route,\n        split_part(route, '-', 1) as origin,\n        split_part(route, '-', 2) as destination\n    from (\n        select distinct route from FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features\n    )\n),\n\nflagged_with_median as (\n    -- Join pricing features with route daily prices to get median fare\n    select\n        f.route,\n        f.any_rule_flag,\n        f.total_fare,\n        f.r1_price_outlier,\n        f.r2_seat_scarcity,\n        f.r3_monopoly_premium,\n        f.carrier_code,\n        rdp.median_fare\n    from FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features f\n    left join FLIGHT_PRICES.WALRUS_PUBLIC.int_route_daily_prices rdp\n        on  rdp.route = f.route\n        and rdp.carrier_code = f.carrier_code\n        and rdp.dtf_bucket = f.dtf_bucket\n        and rdp.flight_date = f.flight_date\n)\n\nselect\n    r.route,\n    r.origin,\n    r.destination,\n    \n    -- Add geo data\n    og.lat_deg as origin_lat,\n    og.lon_deg as origin_lon,\n    dg.lat_deg as destination_lat,\n    dg.lon_deg as destination_lon,\n    \n    -- Summary metrics\n    count(*) as total_bookings,\n    sum(f.any_rule_flag) as flagged_bookings,\n    100.0 * sum(f.any_rule_flag) / count(*) as pct_flagged,\n    \n    -- Rule breakdown\n    sum(f.r1_price_outlier) as r1_flags,\n    sum(f.r2_seat_scarcity) as r2_flags,\n    sum(f.r3_monopoly_premium) as r3_flags,\n    \n    -- Competition metrics\n    rc.carrier_count,\n    rc.hhi,\n    case\n        when rc.hhi >= 0.8 then 'High Concentration'\n        when rc.hhi >= 0.5 then 'Moderate Concentration'\n        else 'Low Concentration'\n    end as concentration_level,\n    \n    -- Price metrics\n    avg(f.total_fare) as avg_fare,\n    median(f.total_fare) as median_fare,\n    avg(case when f.any_rule_flag = 1 then f.total_fare else null end) as avg_flagged_fare,\n    \n    -- Distance metrics\n    avg(f.trip_dist) as avg_distance_miles,\n    \n    -- Estimated extra cost - now using pre-joined median fare\n    sum(case \n        when f.any_rule_flag = 1 and fm.median_fare is not null then \n            f.total_fare - fm.median_fare\n        else 0 \n    end) as total_extra_cost,\n    \n    -- Serving carriers list\n    array_agg(distinct f.carrier_code) as serving_carriers\n\nfrom route_parts r\njoin FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features f\n    on r.route = f.route\nleft join FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo og\n    on r.origin = og.iata_code\nleft join FLIGHT_PRICES.WALRUS_PUBLIC.seed_airport_geo dg\n    on r.destination = dg.iata_code\nleft join FLIGHT_PRICES.WALRUS_PUBLIC.int_route_competition rc\n    on r.route = rc.route\nleft join flagged_with_median fm\n    on f.route = fm.route and f.carrier_code = fm.carrier_code\ngroup by \n    r.route, \n    r.origin, \n    r.destination,\n    og.lat_deg, \n    og.lon_deg, \n    dg.lat_deg, \n    dg.lon_deg,\n    rc.carrier_count,\n    rc.hhi", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_route_performance", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.210829Z", "completed_at": "2025-05-06T22:04:25.222798Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.225789Z", "completed_at": "2025-05-06T22:04:25.225789Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02792501449584961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_timeseries_metrics", "compiled": true, "compiled_code": "\n\nwith flagged_with_median as (\n    -- Join pricing features with route daily prices to get median fare\n    select\n        mpf.flight_date,\n        mpf.any_rule_flag,\n        mpf.total_fare,\n        mpf.r1_price_outlier,\n        mpf.r2_seat_scarcity,\n        mpf.r3_monopoly_premium,\n        rdp.median_fare\n    from FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features mpf\n    left join FLIGHT_PRICES.WALRUS_PUBLIC.int_route_daily_prices rdp\n        on  rdp.route = mpf.route\n        and rdp.carrier_code = mpf.carrier_code\n        and rdp.dtf_bucket = mpf.dtf_bucket\n        and rdp.flight_date = mpf.flight_date\n)\n\nselect\n    flight_date,\n    count(*) as total_bookings,\n    sum(any_rule_flag) as flagged_bookings,\n    100.0 * sum(any_rule_flag) / count(*) as pct_flagged,\n    \n    -- Average prices\n    avg(total_fare) as avg_total_fare,\n    median(total_fare) as median_total_fare,\n    avg(case when any_rule_flag = 1 then total_fare else null end) as avg_flagged_fare,\n    \n    -- Rule breakdown\n    sum(r1_price_outlier) as r1_flags,\n    sum(r2_seat_scarcity) as r2_flags,\n    sum(r3_monopoly_premium) as r3_flags,\n    \n    -- Extra cost calculation - now using pre-joined median fare\n    sum(case \n        when any_rule_flag = 1 and median_fare is not null then \n            total_fare - median_fare\n        else 0 \n    end) as daily_extra_cost\n\nfrom flagged_with_median\ngroup by flight_date\norder by flight_date", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_timeseries_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.214819Z", "completed_at": "2025-05-06T22:04:25.223796Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.226787Z", "completed_at": "2025-05-06T22:04:25.226787Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02792525291442871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_dashboard_kpis", "compiled": true, "compiled_code": "\n\n-- 1) Base data: every booking, annotated with alert flags & extra cost\nwith base as (\n\n  select\n    s.legid,\n    s.search_date,\n    s.flight_date,\n    s.route,\n    s.fare_bucket,\n    s.usd_per_mi,\n    coalesce(f.any_rule_flag,         0) as any_alert,\n    coalesce(f.r1_price_outlier,      0) as is_r1_outlier,\n    coalesce(f.r2_seat_scarcity,      0) as is_r2_scarcity,\n    coalesce(f.r3_monopoly_premium,   0) as is_r3_monopoly,\n    coalesce(e.extra_cost,            0) as extra_cost\n\n  from FLIGHT_PRICES.WALRUS_PUBLIC.stg_fare_searches         as s\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.mart_pricing_features as f using (legid)\n  left join FLIGHT_PRICES.WALRUS_PUBLIC.int_flagged_extra_costs as e using (legid)\n\n),\n\n-- 2) Aggregate KPIs over that base set\nkpis as (\n\n  select\n    count(*)                                   as total_bookings,\n    sum(any_alert)                             as total_any_alerts,\n    sum(is_r1_outlier)                         as total_R1_alerts,\n    sum(is_r2_scarcity)                        as total_R2_alerts,\n    sum(is_r3_monopoly)                        as total_R3_alerts,\n\n    round(100.0 * sum(any_alert)/nullif(count(*),0),2)   as pct_any_alerts,\n    round(100.0 * sum(is_r1_outlier)/nullif(count(*),0),2) as pct_R1_outliers,\n    round(100.0 * sum(is_r2_scarcity)/nullif(count(*),0),2) as pct_R2_scarcity,\n    round(100.0 * sum(is_r3_monopoly)/nullif(count(*),0),2) as pct_R3_monopoly,\n\n    sum(extra_cost)                            as total_extra_cost_usd,\n    round(sum(extra_cost)/nullif(sum(any_alert),0),2) as avg_extra_per_alert\n\n  from base\n\n)\n\nselect * from kpis", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_dashboard_kpis", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-06T22:04:25.229779Z", "completed_at": "2025-05-06T22:04:25.233769Z"}, {"name": "execute", "started_at": "2025-05-06T22:04:25.234766Z", "completed_at": "2025-05-06T22:04:25.234766Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00598454475402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.fair_pricing_radar.mart_extra_cost_summary", "compiled": true, "compiled_code": "\n\nselect\n  /* overall */\n  count(*)                       as num_flagged_bookings,\n  sum(extra_cost)                as total_extra_cost,\n  sum(extra_cost) / nullif(count(*),0) as avg_extra_per_booking,\n\n  /* by rule */\n  sum(case when is_r1 = 1 then extra_cost else 0 end)\n                                 as total_extra_r1,\n  sum(case when is_r2 = 1 then extra_cost else 0 end)\n                                 as total_extra_r2,\n  sum(case when is_r3 = 1 then extra_cost else 0 end)\n                                 as total_extra_r3\n\nfrom FLIGHT_PRICES.WALRUS_PUBLIC.int_flagged_extra_costs", "relation_name": "FLIGHT_PRICES.WALRUS_PUBLIC.mart_extra_cost_summary", "batch_results": null}], "elapsed_time": 9.551620483398438, "args": {"log_path": "C:\\Users\\Mattia\\Business_Challenge\\fair_pricing_radar\\logs", "project_dir": "C:\\Users\\Mattia\\Business_Challenge\\fair_pricing_radar", "log_format": "default", "empty_catalog": false, "require_yaml_configuration_for_mf_time_spines": false, "partial_parse": true, "macro_debugging": false, "log_format_file": "debug", "populate_cache": true, "defer": false, "state_modified_compare_more_unrendered_values": false, "require_batched_execution_for_custom_microbatch_strategy": false, "compile": true, "skip_nodes_if_on_run_start_fails": false, "source_freshness_run_project_hooks": false, "require_explicit_package_overrides_for_builtin_materializations": true, "exclude": [], "introspect": true, "static_parser": true, "show_resource_report": false, "warn_error_options": {"include": [], "exclude": []}, "strict_mode": false, "send_anonymous_usage_stats": true, "use_colors": true, "require_resource_names_without_spaces": false, "log_file_max_bytes": 10485760, "write_json": true, "invocation_command": "dbt docs generate", "print": true, "select": [], "log_level": "info", "state_modified_compare_vars": false, "quiet": false, "which": "generate", "cache_selected_only": false, "use_colors_file": true, "version_check": true, "require_nested_cumulative_type_params": false, "profiles_dir": "C:\\Users\\Mattia\\.dbt", "vars": {}, "log_level_file": "debug", "indirect_selection": "eager", "printer_width": 80, "static": false, "favor_state": false, "partial_parse_file_diff": true}}